package com.example.ev3;

import com.j4ev3.core.LED;
import com.j4ev3.core.Sensor;
import com.streambase.sb.*;
import com.streambase.sb.operator.*;

/**
 * Generated by JDT StreamBase Client Templates (Version: 10.6.1.2008190131).
 *
 * This class is used as a Java Operator in a StreamBase application.
 * One instance will be created for each Java Operator in a StreamBase 
 * application. 
 * <p>
 * Enqueue methods should only be called from processTuple.
 * @see Parameterizable
 * @see Operator
 * For in-depth information on implementing a custom Java Operator, please see
 * "Developing StreamBase Java Operators" in the StreamBase documentation.
 */
public class EV3ConnectionManager extends Operator implements Parameterizable,ISharableAdapter {

	public static final long serialVersionUID = 1623849395795L;
	private String displayName = "EV3 Connection Manager";
	
	//Properties
	private String MACaddress;
	
	private EV3SharedObject connectTo;
	
	
	// Local variables
	private int inputPorts = 0;
	private int outputPorts = 0;
	private Schema[] outputSchemas; // caches the Schemas given during init() for use at processTuple()
	

	/**
	* The constructor is called when the Operator instance is created, but before the Operator 
	* is connected to the StreamBase application. We recommended that you set the initial input
	* port and output port count in the constructor by calling setPortHints(inPortCount, outPortCount).
	* The default is 1 input port, 1 output port. The constructor may also set default values for 
	* operator parameters. These values will be displayed in StreamBase Studio when a new instance
	* of this operator is  dragged to the canvas, and serve as the default values for omitted
	* optional parameters.
	 */
	public EV3ConnectionManager() {
		super();
		setPortHints(inputPorts, outputPorts);
		setDisplayName(displayName);
		setShortDisplayName(this.getClass().getSimpleName());
		
		setMACaddress("");
	}

	/**
	* The typecheck method is called after the Operator instance is connected in the StreamBase
	* application, allowing the Operator to validate its properties. The Operator class may 
	* change the number of input or output ports by calling the requireInputPortCount(portCount)
	* method or the setOutputSchema(schema, portNum) method. If the verifyInputPortCount method 
	* is passed a different number of ports than the Operator currently has, a PortMismatchException
	* (subtype of TypecheckException) is thrown.
	*/
	public void typecheck() throws TypecheckException {
		// typecheck: require a specific number of input ports
		requireInputPortCount(inputPorts);
		
		if(!isValid(MACaddress)) {
			throw new TypecheckException(String.format("The adapter requires a 12-character Bluetooth MAC address."));
		}
		getLogger().info("Typechecking now.");

	}
	
	private boolean isValid(String MAC) {
		int length = MAC.length();
		if(length != 12) return false; //must be 12 characters
		for (int i = 0; i<length; i++) {
			char ch = MAC.charAt(i);
			if ((ch < '0' || ch > '9') && (ch < 'A' || ch > 'F') && (ch < 'a' || ch > 'f')) { //must be a hex number
				return false;
	        }
		}
		return true;
	}

	/**
	* This method will be called by the StreamBase server for each Tuple given
	* to the Operator to process. This is the only time an operator should 
	* enqueue output Tuples.
	* @param inputPort the input port that the tuple is from (ports are zero based)
	* @param tuple the tuple from the given input port
	* @throws StreamBaseException Terminates the application.
	*/
	public void processTuple(int inputPort, Tuple tuple) throws StreamBaseException {
		if (getLogger().isInfoEnabled()) {
			getLogger().info("operator processing a tuple at input port" + inputPort);
		}
		//This operator does not have an input port and does not process tuples.
	}

	/**
	 * If typecheck succeeds, the init method is called before the StreamBase application
	 * is started. Note that your Operator class is not required to define the init method,
	 * unless (for example) you need to perform initialization of a resource such as a JDBC
	 * pool, if your operator is making JDBC calls. StreamBase Studio does not call this
	 * during authoring.
	 */
	public void init() throws StreamBaseException {
		super.init();
		//connect to shared object;
		connectTo = EV3SharedObject.getSharedObjectInstance(this);
		
		// for best performance, consider caching input or output Schema.Field objects for
		// use later in processTuple()
		outputSchemas = new Schema[outputPorts];

		for (int i = 0; i < outputPorts; ++i) {
			outputSchemas[i] = getRuntimeOutputSchema(i);
		}
		
		connectTo.run(MACaddress);
		getLogger().info("Connection to %s successful.", MACaddress);
	}

	/**
	*  The shutdown method is called when the StreamBase server is in the process of shutting down.
	*/
	public void shutdown() {
		getLogger().info("Shutting down");
	}
	
	public void postShutdown() {
		getLogger().info("Post-shutting down");
	}
	

	//Getters & setters
	public String getMACaddress() {
		return MACaddress;
	}

	public void setMACaddress(String settingForSharedObject) {
		this.MACaddress = settingForSharedObject;
	}

	@Override
	public String getConnectionManagerName() {
		return this.getName();
	}


}
